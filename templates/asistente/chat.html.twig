{% extends 'base.html.twig' %}

{% block title %}Asistente Virtual Tito - Ciardi Hnos{% endblock %}

{% block additional_stylesheets %}
<style>
    .chat-container {
        height: 500px;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background-color: #f8f9fa;
        overflow-y: auto;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .mensaje-usuario, .mensaje-asistente {
        margin-bottom: 1rem;
        display: flex;
        align-items: flex-start;
    }

    .mensaje-usuario {
        justify-content: flex-end;
    }

    .burbuja {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-wrap: break-word;
    }

    .burbuja-usuario {
        background-color: #007bff;
        color: white;
        border-bottom-right-radius: 0.25rem;
    }

    .burbuja-asistente {
        background-color: white;
        color: #333;
        border: 1px solid #dee2e6;
        border-bottom-left-radius: 0.25rem;
        margin-left: 0.5rem;
    }

    .avatar-tito {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #28a745;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        flex-shrink: 0;
    }

    .productos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .producto-card {
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        padding: 1rem;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: box-shadow 0.2s ease;
    }

    .producto-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .producto-precio {
        font-size: 1.2rem;
        font-weight: bold;
        color: #28a745;
    }

    .sugerencias {
        margin-top: 0.5rem;
    }

    .sugerencia-btn {
        margin: 0.25rem;
        font-size: 0.875rem;
    }

    .typing-indicator {
        display: none;
        align-items: center;
        margin-bottom: 1rem;
    }

    .typing-dots {
        display: flex;
        align-items: center;
        margin-left: 0.5rem;
    }

    .typing-dots span {
        height: 8px;
        width: 8px;
        background-color: #bbb;
        border-radius: 50%;
        display: inline-block;
        margin: 0 2px;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dots span:nth-child(1) { animation-delay: -0.32s; }
    .typing-dots span:nth-child(2) { animation-delay: -0.16s; }

    @keyframes typing {
        0%, 80%, 100% { transform: scale(0); }
        40% { transform: scale(1); }
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-robot"></i>
                        Asistente Virtual Tito - Ciardi Hnos
                    </h4>
                    <small>Especialista en materiales eléctricos</small>
                    {% if cliente %}
                        <div class="mt-1">
                            <small><i class="bi bi-person-check"></i> Cliente: {{ cliente.razonSocial }}</small>
                        </div>
                    {% endif %}
                </div>

                <div class="card-body">
                    <!-- Área del chat -->
                    <div id="chatContainer" class="chat-container">
                        <!-- Mensaje de bienvenida -->
                        <div class="mensaje-asistente">
                            <div class="avatar-tito">T</div>
                            <div class="burbuja burbuja-asistente">
                                {{ mensaje_bienvenida }}
                            </div>
                        </div>

                        <!-- Historial previo si existe -->
                        {% if historial %}
                            {% for mensaje in historial %}
                                <div class="mensaje-{{ mensaje.usuario_id ? 'usuario' : 'asistente' }}">
                                    {% if not mensaje.usuario_id %}
                                        <div class="avatar-tito">T</div>
                                    {% endif %}
                                    <div class="burbuja burbuja-{{ mensaje.usuario_id ? 'usuario' : 'asistente' }}">
                                        {{ mensaje.mensaje|raw }}
                                    </div>
                                </div>
                            {% endfor %}
                        {% endif %}

                        <!-- Indicador de escritura -->
                        <div id="typingIndicator" class="typing-indicator">
                            <div class="avatar-tito">T</div>
                            <div class="typing-dots">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </div>
                    </div>

                    <!-- Formulario de chat -->
                    <form id="formChat" class="d-flex gap-2">
                        <input 
                            type="text" 
                            id="inputMensaje" 
                            class="form-control" 
                            placeholder="Escribe tu consulta aquí..."
                            required
                            autocomplete="off"
                        >
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-send"></i>
                        </button>
                    </form>

                    <!-- Botones de acceso rápido -->
                    <div class="mt-3">
                        <h6>Accesos rápidos:</h6>
                        <div class="d-flex flex-wrap gap-2">
                            <button class="btn btn-outline-secondary btn-sm sugerencia-btn" data-mensaje="¿Qué productos nuevos tienen?">
                                Productos nuevos
                            </button>
                            <button class="btn btn-outline-secondary btn-sm sugerencia-btn" data-mensaje="Información de sucursales">
                                Sucursales
                            </button>
                            <button class="btn btn-outline-secondary btn-sm sugerencia-btn" data-mensaje="Ver mi carrito">
                                Mi carrito
                            </button>
                            <button class="btn btn-outline-secondary btn-sm sugerencia-btn" data-mensaje="Necesito cables">
                                Cables
                            </button>
                            <button class="btn btn-outline-secondary btn-sm sugerencia-btn" data-mensaje="¿Tienen tableros eléctricos?">
                                Tableros
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para productos -->
<div class="modal fade" id="modalProducto" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalles del Producto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modalProductoBody">
                <!-- Contenido dinámico -->
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block additional_javascripts %}
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('formChat');
    const input = document.getElementById('inputMensaje');
    const chatContainer = document.getElementById('chatContainer');
    const typingIndicator = document.getElementById('typingIndicator');
    
    // Función para mostrar mensaje en el chat
    function mostrarMensaje(origen, contenido, productos = []) {
        const div = document.createElement('div');
        div.className = `mensaje-${origen}`;
        
        let html = '';
        if (origen === 'asistente') {
            html = `
                <div class="avatar-tito">T</div>
                <div class="burbuja burbuja-asistente">
                    ${marked.parse ? marked.parse(contenido) : contenido}
                </div>
            `;
        } else {
            html = `<div class="burbuja burbuja-usuario">${contenido}</div>`;
        }
        
        div.innerHTML = html;
        chatContainer.appendChild(div);
        
        // Mostrar productos si los hay
        if (productos && productos.length > 0) {
            mostrarProductos(productos);
        }
        
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // Función para mostrar productos
    function mostrarProductos(productos) {
        const productosDiv = document.createElement('div');
        productosDiv.className = 'productos-grid mt-3';
        
        productos.forEach(producto => {
            const productoCard = document.createElement('div');
            productoCard.className = 'producto-card';
            productoCard.innerHTML = `
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <h6 class="mb-0">${producto.detalleWeb}</h6>
                    <span class="badge bg-primary">${producto.codigo}</span>
                </div>
                <div class="row mb-2">
                    <div class="col-6">
                        <small class="text-muted">Marca:</small><br>
                        <strong>${producto.marca}</strong>
                    </div>
                    <div class="col-6 text-end">
                        <small class="text-muted">Precio:</small><br>
                        <span class="producto-precio">$${producto.precioMostrar.toLocaleString('es-AR', {minimumFractionDigits: 2})}</span>
                    </div>
                </div>
                ${producto.rubro ? `
                <div class="mb-2">
                    <small class="text-muted">Categoría:</small>
                    <span class="badge bg-secondary">${producto.rubro}</span>
                    ${producto.subrubro ? `<span class="badge bg-light text-dark">${producto.subrubro}</span>` : ''}
                </div>
                ` : ''}
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary agregar-carrito-btn" data-codigo="${producto.codigo}">
                        <i class="bi bi-cart-plus"></i> Agregar al carrito
                    </button>
                    ${producto.urlProducto ? `<a href="${producto.urlProducto}" class="btn btn-sm btn-outline-primary">Ver detalles</a>` : ''}
                </div>
            `;
            productosDiv.appendChild(productoCard);
        });
        
        chatContainer.appendChild(productosDiv);
    }
    
    // Función para mostrar/ocultar typing indicator
    function mostrarTyping() {
        typingIndicator.style.display = 'flex';
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    function ocultarTyping() {
        typingIndicator.style.display = 'none';
    }
    
    // Enviar mensaje
    async function enviarMensaje(mensaje) {
        mostrarMensaje('usuario', mensaje);
        mostrarTyping();
        
        try {
            const response = await fetch('{{ path('app_asistente_mensaje') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    mensaje: mensaje,
                    url_actual: window.location.pathname
                })
            });
            
            const data = await response.json();
            ocultarTyping();
            
            if (data.exito) {
                mostrarMensaje('asistente', data.respuesta, data.productos);
            } else {
                mostrarMensaje('asistente', data.mensaje || 'Error procesando la consulta');
            }
        } catch (error) {
            ocultarTyping();
            mostrarMensaje('asistente', 'Lo siento, ocurrió un error técnico. Por favor, intenta nuevamente.');
        }
    }
    
    // Event listeners
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        const mensaje = input.value.trim();
        if (mensaje) {
            enviarMensaje(mensaje);
            input.value = '';
        }
    });
    
    // Botones de sugerencias
    document.querySelectorAll('.sugerencia-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const mensaje = this.dataset.mensaje;
            enviarMensaje(mensaje);
        });
    });
    
    // Agregar al carrito desde productos mostrados
    chatContainer.addEventListener('click', async function(e) {
        if (e.target.closest('.agregar-carrito-btn')) {
            const btn = e.target.closest('.agregar-carrito-btn');
            const codigo = btn.dataset.codigo;
            
            try {
                const response = await fetch('{{ path('app_asistente_agregar_carrito') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        codigo: codigo,
                        cantidad: 1
                    })
                });
                
                const data = await response.json();
                
                if (data.exito) {
                    mostrarMensaje('asistente', data.mensaje);
                    btn.innerHTML = '<i class="bi bi-check"></i> Agregado';
                    btn.classList.replace('btn-primary', 'btn-success');
                    btn.disabled = true;
                } else {
                    mostrarMensaje('asistente', data.mensaje);
                }
            } catch (error) {
                mostrarMensaje('asistente', 'Error al agregar el producto al carrito');
            }
        }
    });
    
    // Auto-focus en el input
    input.focus();
});
</script>
{% endblock %} 